Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0114b293-1a65-469b-a311-2b8be34d37c3\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/package-lock.json\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"27HUaqzaE7u4urOumq7Ag6mwqLa\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"yarn\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0114b293-1a65-469b-a311-2b8be34d37c3\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1648976583638</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1648976583638</updated>\r\n      <workItem from=\"1648976589279\" duration=\"1058000\" />\r\n      <workItem from=\"1649337323725\" duration=\"3750000\" />\r\n      <workItem from=\"1649383287380\" duration=\"622000\" />\r\n      <workItem from=\"1649479043754\" duration=\"1729000\" />\r\n      <workItem from=\"1649679461833\" duration=\"769000\" />\r\n      <workItem from=\"1649896618165\" duration=\"652000\" />\r\n      <workItem from=\"1650025440146\" duration=\"3326000\" />\r\n      <workItem from=\"1650122376288\" duration=\"2508000\" />\r\n      <workItem from=\"1650179375977\" duration=\"1372000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5a04b1b9b46a46097eacb4ab971621ea0ff85bc2)
+++ b/.idea/workspace.xml	(date 1650189241197)
@@ -3,7 +3,8 @@
   <component name="ChangeListManager">
     <list default="true" id="0114b293-1a65-469b-a311-2b8be34d37c3" name="Default Changelist" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/app/package-lock.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/views/diary/list/DiaryList.js" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/views/diary/list/DiaryList.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/views/sns/profile/ProfileView.js" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/views/sns/profile/ProfileView.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -48,7 +49,7 @@
       <workItem from="1649896618165" duration="652000" />
       <workItem from="1650025440146" duration="3326000" />
       <workItem from="1650122376288" duration="2508000" />
-      <workItem from="1650179375977" duration="1372000" />
+      <workItem from="1650179375977" duration="1973000" />
     </task>
     <servers />
   </component>
Index: server/routes/Diaries.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express')\r\nconst router = express.Router();\r\nconst bodyParser = require('body-parser');\r\nconst { Diary } = require(\"../models/Diary\");\r\n\r\n/* GET. */\r\nrouter.get('/find', function(req, res, next) {\r\n    // 전체 데이터 가져오기\r\n    Diary.find().then( (diaries) => {\r\n        res.json(diaries)\r\n    }).catch( (err) => {\r\n        console.log(err);\r\n        next(err)\r\n    });\r\n});\r\n\r\nrouter.post('/findOwn', function(req, res, next) {\r\n    console.log(req.body.data.user_id);\r\n    // 전체 데이터 가져오기\r\n    Diary.find().where('user_id').equals(req.body.data.user_id).sort({date: -1}).then( (diaries) => {\r\n        res.json(diaries)\r\n    }).catch( (err) => {\r\n        console.log(err);\r\n        next(err)\r\n    });\r\n});\r\n\r\n/* POST*/\r\nrouter.post('/save', function(req, res) {\r\n    console.log(req.body);\r\n    // 데이터 저장\r\n    var newDiary = new Diary(req.body.data);\r\n    newDiary.save(function(error, data){\r\n        if(error){\r\n            console.log(error);\r\n            return res.json({status: 'fail', error})\r\n        }else{\r\n            console.log('Saved!')\r\n            return res.json({status: 'success'})\r\n        }\r\n    });\r\n});\r\n\r\n/* POST*/\r\nrouter.post('/saveTemp', function(req, res) {\r\n    console.log(req.body);\r\n    // 데이터 저장\r\n    var newDiary = new Diary(req.body.data);\r\n    newDiary.save(function(error, data){\r\n        if(error){\r\n            console.log(error);\r\n            return res.json({status: 'fail', error})\r\n        }else{\r\n            console.log('Saved!')\r\n            return res.json({status: 'success'})\r\n        }\r\n    });\r\n});\r\n\r\n//작동하는지 확인 안해봄\r\nrouter.post('/findOne/', function(req, res, next) {\r\n    console.log(req.body);\r\n    // 특정 아이디값 가져오기\r\n    Diary.findOne({_id:req.body.id}, function(error,diary){\r\n        console.log('--- Read one ---');\r\n        if(error){\r\n            console.log(error);\r\n        }else{\r\n            console.log(diary);\r\n        }\r\n    });\r\n});\r\n\r\nrouter.post('/findPublic', function(req, res, next) {\r\n    // 전체 데이터 가져오기\r\n    Diary.find().where('disclosure').equals('public').sort({date: -1}).then( (diaries) => {\r\n        console.log(diaries);\r\n        res.json(diaries)\r\n    }).catch( (err) => {\r\n        console.log(err);\r\n        next(err)\r\n    });\r\n});\r\n\r\n// //작동하는지 확인 안해봄\r\n// router.post('/modify/', function(req, res, next) {\r\n//     console.log(req.body);\r\n//     // 특정아이디 수정하기\r\n//     Diary.findById({_id:req.body.id}, function(error,diary){\r\n//         console.log('--- Update(PUT) ---');\r\n//         if(error){\r\n//             console.log(error);\r\n//         }else{\r\n//             diary.title = '--modified--';\r\n//             diary.save(function(error,modified_diary){\r\n//                 if(error){\r\n//                     console.log(error);\r\n//                 }else{\r\n//                     console.log(modified_diary);\r\n//                 }\r\n//             });\r\n//         }\r\n//     });\r\n// });\r\n\r\nrouter.post('/modify', function(req, res, next) {\r\n    const diary = req.body.data;\r\n    console.log(diary);\r\n    // 데이터 수정\r\n    Diary.findOneAndUpdate({_id: diary._id}, {$set:{user_id:diary.user_id, date:diary.date, title:diary.title, content:diary.content, disclosure:diary.disclosure}}, function(error, data){\r\n        console.log('--- UPDATE ---');\r\n        if(error){\r\n            console.log(error);\r\n        }\r\n        console.log('--- updated ---');\r\n        Diary.findOne({_id: diary._id}, function(error,diary){\r\n            console.log('--- Read one ---');\r\n            if(error){\r\n                console.log(error);\r\n            }else{\r\n                console.log(diary);\r\n                return res.json(diary)\r\n            }\r\n        });\r\n        // return res.json({status: 'fail'})\r\n    });\r\n});\r\n\r\n//작동하는지 확인 안해봄\r\nrouter.post('/delete/', function(req, res, next) {\r\n    console.log(req.body);\r\n    // 삭제\r\n    Diary.deleteOne({_id: req.body.data.id}, function(error,output){\r\n        console.log('--- Delete ---');\r\n        if(error){\r\n            console.log(error);\r\n        }\r\n\r\n        /* ( SINCE DELETE OPERATION IS IDEMPOTENT, NO NEED TO SPECIFY )\r\n            어떤 과정을 반복적으로 수행 하여도 결과가 동일하다. 삭제한 데이터를 다시 삭제하더라도, 존재하지 않는 데이터를 제거요청 하더라도 오류가 아니기 때문에\r\n            이부분에 대한 처리는 필요없다. 그냥 삭제 된것으로 처리\r\n            */\r\n        console.log('--- deleted ---');\r\n        return res.json({status: 'success'})\r\n    });\r\n});\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/routes/Diaries.js b/server/routes/Diaries.js
--- a/server/routes/Diaries.js	(revision 5a04b1b9b46a46097eacb4ab971621ea0ff85bc2)
+++ b/server/routes/Diaries.js	(date 1650189153985)
@@ -74,7 +74,6 @@
 router.post('/findPublic', function(req, res, next) {
     // 전체 데이터 가져오기
     Diary.find().where('disclosure').equals('public').sort({date: -1}).then( (diaries) => {
-        console.log(diaries);
         res.json(diaries)
     }).catch( (err) => {
         console.log(err);
